// Site-wide configuration for SystemJS
<%
  env = Rails.application.assets

  extensions = ["*.es6", "*.js"]
  matcher = Regexp.new("^#{env.root}/app/assets/javascripts/[\\w-]+\\.")

  def filter_includes(dependencies)
    dependencies
  end

  assets = extensions
    .map { |ext| env.each_logical_path(ext).to_a }.flatten
    .select { |path| path != "systemjs.config.js" && env.resolve(path).to_s.match(matcher) != nil }
    .map { |path| env[path] }
    .select { |asset| filter_includes(asset.dependencies).size > 0 }

  bundles = assets.reduce(Hash.new) { |memo, asset|
    bundle = asset.logical_path.match(/^(.+?)\./)[1]
    required_paths = filter_includes(asset.dependencies)
      .map { |asset| asset.logical_path }
      .map { |path| path.match(/^(.+?)\./)[1] }
      .map { |path| "#{path}.js" }

    memo["#{bundle}"] = required_paths.uniq
    memo
  }
%>

(function(global) {
  // Take a look at the SystemJS project page for more information about these
  // config options. https://github.com/systemjs/systemjs/blob/master/docs/config-api.md.

  // Set to `true` to append .js extensions to import paths.
  // TODO(Dan): This option will be deprecated in the future.
  var defaultJSExtensions = true;

  // The reference path for imports.
  var baseURL = "assets/";

  // Tells SystemJS where to look for named imports.
  var map = {
    "react": "vendor.js"
    // 'rxjs': 'node_modules/rxjs',
    // 'react': 'node_modules/react'
  };

  // Tells SystemJS how to load imports when a filename or extension isn't provided.
  // Can also be used to configure how the module was formatted, i.e. commonjs,
  // amd, umd, global.
  var packages = {
    'react': {'format': 'global'}
    // 'app': { main: 'main.js',  defaultExtension: 'js' }
  };

  // Bundles that are manually configured.
  var manualBundles = {
    // 'bundleA': ['path/to/a/asset1.js', 'path/to/a/asset2.js'],
    // 'bundleB': ['path/to/b/asset1.js', 'path/to/b/asset2.js'],
  };

  // Bundles that are auto-generated by this template. Use `manualBundles` for
  // configuring bundles that can't be generated automatically.
  var detectedBundles = <%= JSON.pretty_generate(bundles, indent: "    ") %>;

  SystemJS.config({
    defaultJSExtensions: defaultJSExtensions,
    baseURL: baseURL,
    map: map,
    packages: packages,
    bundles: merge(detectedBundles, manualBundles)
  });

  function merge(a, b) {
    var result = copy(a);
    for (var key in b) {
      result[key] = b[key];
    }
    return result;
  }

  function copy(a) {
    var result = {};
    for (var key in a) {
      result[key] = a[key];
    }
    return result;
  }
})(this);
